@inject WordListsRepository WordListsRepository
@inject AppState AppState
@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Việt Buddy</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <i class="fas fa-home"></i> Home
            </NavLink>
        </li>
        @foreach (var list in wordLists)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href=@($"wordlist/{list.Id}") Match="NavLinkMatch.All">
                    <i class="fas fa-book"></i> @list.Title
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private List<WordList> wordLists = new List<WordList>();

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        wordLists = await WordListsRepository.GetWordListsAsync();
        AppState.WordListChanged += async () => await RefreshWordLists();
    }

    private async Task RefreshWordLists()
    {
        wordLists = await WordListsRepository.GetWordListsAsync();
        StateHasChanged();
    }

    public void Dispose() 
    {
        AppState.WordListChanged -= async () => await RefreshWordLists();
    }
}
