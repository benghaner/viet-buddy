@using VietBuddy.Web.Shared.Buttons
@using Blazored.FluentValidation
@inject TranslationRepository TranslationRepository

@if (!String.IsNullOrEmpty(HeaderText))
{   
    <h2>@HeaderText</h2>
}

<EditForm EditContext="editContext" OnValidSubmit="Submit">
    <FluentValidationValidator />

    <FormSection HelpText="Word or phrase">
        <div class="input-group mb-2">
            <label for="vietnamese" class="input-group-text">VN</label>
            <InputText @bind-Value="Translation.Vietnamese" class="form-control" id="vietnamese" autofocus />
        </div>
        <div class="input-group">
            <label for="english" class="input-group-text">EN</label>
            <InputText @bind-Value="Translation.English" class="form-control" id="english" />
        </div>
    </FormSection>

    <FormSection HelpText="Example sentences">
        @if (!Translation.Examples.Any()) { AddEmptyExample(); }
        @foreach (var example in Translation.Examples)
        {
            <div class="input-group mb-3">
                <InputText @bind-Value="example.Text" class="form-control" />
                <button type="button"
                    class="btn btn-outline-secondary"
                    @onclick="@(() => Translation.Examples.Remove(example))">
                    Delete
                </button>
            </div>
        }
        <button type="button" class="btn btn-outline-secondary" @onclick="AddEmptyExample">Add another</button>
    </FormSection>

    <FormSection HelpText="Additional context. A book, person, etc.">
        <InputText class="form-control"
            list="tagsList"
            id="tags"
            @bind-Value="tag" />
        <datalist id="tagsList">
            @* <option value="dế mèn phiêu lưu ký" /> *@
        </datalist>
        @if (Translation.Tags.Any())
        {
            <div class="mt-3">
                @foreach (var tag in Translation.Tags)
                {
                    <p class="d-flex gap-2 align-items-center m-0">
                        <ButtonTrash Clicked="@(() => RemoveTag(tag))" />
                        <span>@tag</span>
                    </p>
                }
            </div>
        }
    </FormSection>

    <div class="d-flex gap-1 align-items-center">
        <button type="submit" class="btn btn-primary">Submit</button>
        @if (isModal)
        {
            <button type="button" @onclick="ModalInstance.CancelAsync" class="btn btn-outline-secondary">Cancel</button>
        }
        @if (!isNew)
        {
            <ButtonTrash Size="2x" Class="ms-auto" Clicked="Delete" />
        }
    </div>
</EditForm>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public Translation Translation { get; set; } = new Translation();
    [Parameter] public string HeaderText { get; set; }
    private string _tag;
    private string tag
    {
        get { return _tag; }
        set
        {
            _tag = value;
            Translation.Tags.Add(value);
            _tag = "";
        }
    }
    private bool isModal;
    private bool isNew;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        isModal = (ModalInstance != null);
        isNew = (Translation.Id == null);
        SetupEditContext(Translation);
    }

    private void SetupEditContext(Translation translation)
    {
        editContext = new EditContext(translation);
        editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    private void AddEmptyExample() => Translation.Examples.Add(new Example());
    private void RemoveTag(string tag) => Translation.Tags.Remove(tag);
    
    private async Task Submit()
    {
        if (isNew)
        {
            await TranslationRepository.AddAsync(Translation);
            Reset();
        }
        else
        {
            await TranslationRepository.UpdateAsync(Translation);
        }

        if (isModal)
            await ModalInstance.CloseAsync(ModalResult.Ok<EditResult>(EditResult.Modified));
    }

    private void Reset()
    {
        Translation = new Translation();
        SetupEditContext(Translation);
    }

    private async Task Delete()
    {
        await TranslationRepository.DeleteAsync(Translation);

        if (isModal)
            await ModalInstance.CloseAsync(ModalResult.Ok<EditResult>(EditResult.Deleted));
    }
}