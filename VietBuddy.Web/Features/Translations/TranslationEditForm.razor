@using VietBuddy.Web.Shared.Buttons
@using Blazored.FluentValidation
@using Blazored.Typeahead
@inject TranslationRepository TranslationRepository

@if (!String.IsNullOrEmpty(HeaderText))
{   
    <h2>@HeaderText</h2>
}

<EditForm EditContext="editContext" OnValidSubmit="Submit">
    <FluentValidationValidator />

    <div class="my-4">
        <h6 class="fw-light">Word or phrase</h6>
        <div class="input-group mb-2">
            <label for="vietnamese" class="input-group-text">VN</label>
            <InputText @bind-Value="translation.Vietnamese" class="form-control" id="vietnamese" autofocus />
        </div>
        <div class="input-group">
            <label for="english" class="input-group-text">EN</label>
            <InputText @bind-Value="translation.English" class="form-control" id="english" />
        </div>
    </div>

    <div class="my-4">
        <h6 class="fw-light">Example sentences</h6>
        @if (!examples.Any()) { AddEmptyExample(); }
        @foreach (var example in examples)
        {
            <div class="input-group mb-2">
                <InputText @bind-Value="example.Value" class="form-control" />
                <button type="button"
                    class="btn btn-outline-secondary"
                    aria-label="Delete"
                    @onclick="@(() => examples.Remove(example))">
                    <i class="fal fa-trash-alt"></i>
                </button>
            </div>
        }
        <a role="button" class="link-primary" @onclick="AddEmptyExample">
            <i class="fal fa-plus me-1"></i>Add more
        </a>
    </div>

    <div class="my-4">
        <h6 class="fw-light">Tags</h6>
        <BlazoredTypeahead SearchMethod="SearchAvailableTags"
                   @bind-Values="selectedTags"
                   EnableDropDown=@availableTags.Any()
                   MinimumLength="2"
                   AddItemOnEmptyResultMethod="AddNewTag"
                   placeholder="Search or add a new tag...">
            <SelectedTemplate Context="tag">
                @tag.Value
            </SelectedTemplate>
            <HelpTemplate>
                Please enter a minimum of 2 characters to perform a search.
            </HelpTemplate>
            <NotFoundTemplate Context="searchText">
                Add "@searchText" as a new tag
            </NotFoundTemplate>
            <ResultTemplate Context="tag">
                @tag.Value
            </ResultTemplate>
        </BlazoredTypeahead>
    </div>

    <hr class="my-3">

    <div class="d-flex gap-1 align-items-center">
        <button type="submit" class="btn btn-primary @(isNew ? "w-100" : "")">Submit</button>
        @if (isModal)
        {
            <button type="button" @onclick="ModalInstance.CancelAsync" class="btn btn-outline-secondary">Cancel</button>
        }
        @if (!isNew)
        {
            <ButtonTrash Size="2x" Class="ms-auto" Clicked="Delete" />
        }
    </div>
</EditForm>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public Translation Translation { get; set; } = new Translation();
    [Parameter] public string HeaderText { get; set; }
    private Translation translation;
    private bool isModal;
    private bool isNew;
    private EditContext editContext;
    private List<Text> examples = new List<Text>();
    private List<Text> availableTags = new List<Text>();
    private IList<Text> selectedTags = new List<Text>();

    protected override void OnInitialized()
    {
        isModal = (ModalInstance != null);
        isNew = String.IsNullOrEmpty(Translation.Id);
        translation = isNew ? Translation : Translation.Clone();
        SetupEditContext();
    }

    protected override async Task OnInitializedAsync() => await PreProcessModelAsync();

    private async Task PreProcessModelAsync()
    {
        examples = new List<Text>();
            
        if (translation.Examples.Any())
            examples = translation.Examples.ConvertAll(e => new Text(e));

        selectedTags = new List<Text>();

        if (translation.Tags.Any())
            selectedTags = translation.Tags.ConvertAll(t => new Text(t));

        var tags = await TranslationRepository.GetTagsAsync();
        availableTags = tags.ConvertAll(e => new Text(e));
    }

    private void PostProcessModel()
    {
        if (examples.Any())
            translation.Examples = examples.ConvertAll(e => e.Value);

        if (selectedTags.Any())
            translation.Tags = selectedTags.ToList().ConvertAll(e => e.Value);
    }

    private void SetupEditContext()
    {
        editContext = new EditContext(translation);
        editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    private async Task<IEnumerable<Text>> SearchAvailableTags(string searchText)
    {
        var results = availableTags
            .Where(t => t.Value.ToLower().Contains(searchText.ToLower()))
            .Except(selectedTags);

        return await Task.FromResult(results.ToList());
    }

    private void AddEmptyExample() => examples.Add(new Text());

    private Task<Text> AddNewTag(string text) => Task.FromResult(new Text(text));
    
    private async Task Submit()
    {
        PostProcessModel();

        if (isNew)
        {
            await TranslationRepository.AddAsync(translation);
            await Reset();
        }
        else
        {
            await TranslationRepository.UpdateAsync(translation);
        }

        if (isModal)
        {
            var editResult = new EditResult<Translation>(translation, EditAction.Modified);
            await ModalInstance.CloseAsync(ModalResult.Ok(editResult));
        }
    }

    private async Task Reset()
    {
        translation = new Translation();
        await PreProcessModelAsync();
        SetupEditContext();
    }

    private async Task Delete()
    {
        await TranslationRepository.DeleteAsync(translation);

        if (isModal)
        {
            var editResult = new EditResult<Translation>(translation, EditAction.Deleted);
            await ModalInstance.CloseAsync(ModalResult.Ok(editResult));
        }
    }
}
