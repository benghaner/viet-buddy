@inject TranslationRepository TranslationRepository

@if (!String.IsNullOrEmpty(HeaderText))
{   
    <h2>@HeaderText</h2>
}

<EditForm Model="EditModel" OnValidSubmit="Submit">
    <FormSection HelpText="Add a word or phrase">
        <div class="input-group mb-2">
            <label for="vietnamese" class="input-group-text">VN</label>
            <InputText @bind-Value="EditModel.Translation.Vietnamese" class="form-control" id="vietnamese" autofocus required />
        </div>
        <div class="input-group">
            <label for="english" class="input-group-text">EN</label>
            <InputText @bind-Value="EditModel.Translation.English" class="form-control" id="english" required />
        </div>
    </FormSection>

    <FormSection>
        <label for="tags" class="form-label text-secondary">Include example sentences</label>
        <InputText @bind-Value="example" class="form-control" />
        @if (EditModel.Translation.Examples.Any())
        {
            <div class="mt-3">
                @foreach (var example in EditModel.Translation.Examples)
                {
                    <p class="d-flex gap-2 align-items-center m-0">
                        <ButtonTrash Clicked="@(() => RemoveExample(example))" />
                        <span>@example</span>
                    </p>
                }
            </div>
        }
    </FormSection>

    <FormSection>
        <label for="tags" class="form-label text-secondary">Tag a book, person, etc. for context</label>
        <InputText class="form-control"
            list="tagsList"
            id="tags"
            placeholder="New or existing tag..."
            @bind-Value="tag" />
        <datalist id="tagsList">
            @* <option value="dế mèn phiêu lưu ký" /> *@
        </datalist>
        @if (EditModel.Translation.Tags.Any())
        {
            <div class="mt-3">
                @foreach (var tag in EditModel.Translation.Tags)
                {
                    <p class="d-flex gap-2 align-items-center m-0">
                        <ButtonTrash Clicked="@(() => RemoveTag(tag))" />
                        <span>@tag</span>
                    </p>
                }
            </div>
        }
    </FormSection>

    <div class="d-flex gap-1 align-items-center">
        <button class="btn btn-primary" type="submit">Submit</button>
        @if (isModal)
        {
            <button @onclick="ModalInstance.CancelAsync" class="btn btn-outline-secondary">Cancel</button>
        }
        @if (!EditModel.IsNew)
        {
            <ButtonTrash Size="2x" Class="ms-auto" Clicked="Delete" />
        }
    </div>
</EditForm>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public TranslationEditModel EditModel { get; set; } = new TranslationEditModel();
    [Parameter] public string HeaderText { get; set; }
    private string _example;
    public string example
    {
        get { return _example; }
        set
        {
            _example = value;
            EditModel.Translation.Examples.Add(value);
            _example = "";
        }
    }
    private string _tag;
    private string tag
    {
        get { return _tag; }
        set
        {
            _tag = value;
            EditModel.Translation.Tags.Add(value);
            _tag = "";
        }
    }
    private bool isModal;

    protected override void OnInitialized()
    {
        isModal = (ModalInstance != null);
    }

    private void RemoveTag(string tag) => EditModel.Translation.Tags.Remove(tag);
    
    private void RemoveExample(string example) => EditModel.Translation.Examples.Remove(example);

    private async Task Submit()
    {
        if (EditModel.IsNew)
        {
            await TranslationRepository.AddAsync(EditModel.Translation);
            Reset();
        }
    }

    private void Reset() => EditModel = new TranslationEditModel();

    private void Delete()
    {
        if (isModal)
            ModalInstance.CloseAsync();
    }
}