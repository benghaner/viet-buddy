@inject TranslationRepository Translations

@if (_isNew)
{
    <h2>Add a translation</h2>
}
else
{
    <h2>Edit translation</h2>
}

<EditForm Model="_translation" OnValidSubmit="Submit">
    <FormSection HelpText="Add a word or phrase">
        <div class="input-group mb-2">
            <label for="vietnamese" class="input-group-text">VN</label>
            <InputText @bind-Value="_translation.Vietnamese" class="form-control" id="vietnamese" autofocus />
        </div>
        <div class="input-group">
            <label for="english" class="input-group-text">EN</label>
            <InputText @bind-Value="_translation.English" class="form-control" id="english" />
        </div>
    </FormSection>

    <FormSection HelpText="Tag your translation with some context">
        <div class="input-group">
            <InputText @bind-Value="_tag" class="form-control" placeholder="E.g. A book title"/>
            <button class="btn btn-outline-secondary" type="button" @onclick="AddTag">
                <i class="fas fa-plus"></i> Add
            </button>
        </div>
        @if (_translation.Tags.Any())
        {
            <div class="d-flex gap-1 mt-3 fs-4">
                @foreach (var tag in _translation.Tags)
                {
                    <span class="badge rounded-pill bg-success fw-light" @onclick="@(() => RemoveTag(tag))">
                        @tag
                    </span>
                }
            </div>
        }
    </FormSection>

    <div class="d-flex gap-1">
        <button class="btn btn-primary" type="submit">Submit</button>
        @if (_isNew)
        {
            <button class="btn btn-outline-secondary" type="button" @onclick="Reset">Reset</button>
        }
        else
        {
            <button class="btn btn-outline-danger" type="button" @onclick="Delete">Delete</button>
        }
    </div>
</EditForm>

@code {
    [Parameter] public Translation Translation { get; set; }
    private Translation _translation;
    private string _tag;
    private bool _isNew { get => _translation.Id == null; }

    protected override void OnInitialized()
    {
        _translation = (Translation != null) ? Translation : new Translation();
    }

    private void AddTag()
    {
        _translation.Tags.Add(_tag);
        _tag = "";
    }

    private void RemoveTag(string tag)
    {
        _translation.Tags.Remove(tag);
    }

    private async Task Submit()
    {
        if (_isNew)
        {
            await Translations.AddAsync(_translation);
            Reset();
        }
    }

    private void Reset()
    {
        _translation = new Translation();
        _tag = "";
    }

    private void Delete()
    {
        throw new NotImplementedException();
    }
}